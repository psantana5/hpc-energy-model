# Nginx Configuration for HPC Energy Model
# Reverse proxy with SSL support and load balancing

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_geoip_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format json escape=json
        '{
            "timestamp": "$time_iso8601",
            "remote_addr": "$remote_addr",
            "remote_user": "$remote_user",
            "request": "$request",
            "status": $status,
            "body_bytes_sent": $body_bytes_sent,
            "http_referer": "$http_referer",
            "http_user_agent": "$http_user_agent",
            "http_x_forwarded_for": "$http_x_forwarded_for",
            "request_time": $request_time,
            "upstream_connect_time": "$upstream_connect_time",
            "upstream_header_time": "$upstream_header_time",
            "upstream_response_time": "$upstream_response_time",
            "upstream_addr": "$upstream_addr"
        }';

    access_log /var/log/nginx/access.log json;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffer settings
    client_body_buffer_size 128k;
    client_max_body_size 100m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Timeout settings
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:; frame-ancestors 'none';" always;

    # Upstream definitions
    upstream energy_api {
        least_conn;
        server api:5000 max_fails=3 fail_timeout=30s;
        # Add more API instances for load balancing
        # server api2:5000 max_fails=3 fail_timeout=30s;
        # server api3:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream grafana {
        server grafana:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream prometheus {
        server prometheus:9090 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream alertmanager {
        server alertmanager:9093 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Default server (HTTP)
    server {
        listen 80 default_server;
        server_name _;
        
        # Redirect HTTP to HTTPS if SSL is enabled
        if ($http_x_forwarded_proto != 'https') {
            return 301 https://$host$request_uri;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
        
        # Default location
        location / {
            return 301 /grafana/;
        }
    }

    # HTTPS server (if SSL is enabled)
    server {
        listen 443 ssl http2;
        server_name localhost;
        
        # SSL certificates
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Root location
        location / {
            return 301 /grafana/;
        }
        
        # Energy API
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            limit_conn conn_limit_per_ip 10;
            
            proxy_pass http://energy_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Grafana
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket support for live updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Grafana specific headers
            proxy_set_header X-Grafana-Org-Id 1;
        }
        
        # Prometheus
        location /prometheus/ {
            auth_basic "Prometheus";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Increase timeout for long queries
            proxy_read_timeout 300s;
        }
        
        # Alertmanager
        location /alertmanager/ {
            auth_basic "Alertmanager";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://alertmanager/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Static files for documentation
        location /docs/ {
            alias /usr/share/nginx/html/docs/;
            index index.html;
            try_files $uri $uri/ =404;
            
            # Cache static files
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
        
        # Metrics endpoints (protected)
        location /metrics {
            auth_basic "Metrics";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            # Node exporter
            location /metrics/node {
                proxy_pass http://node-exporter:9100/metrics;
            }
            
            # Thermal exporter
            location /metrics/thermal {
                proxy_pass http://thermal-exporter:9101/metrics;
            }
            
            # Job exporter
            location /metrics/job {
                proxy_pass http://job-exporter:9102/metrics;
            }
        }
        
        # Logs endpoint (protected)
        location /logs/ {
            auth_basic "Logs";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            # Fluentd
            location /logs/fluentd {
                proxy_pass http://fluentd:9880/;
            }
        }
        
        # WebSocket endpoint for real-time updates
        location /ws/ {
            proxy_pass http://energy_api/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Server for internal monitoring (HTTP only)
    server {
        listen 8080;
        server_name localhost;
        access_log off;
        
        # Health check
        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx metrics for Prometheus
        location /metrics {
            stub_status on;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
    }
}

# Stream configuration for TCP/UDP load balancing
stream {
    # Log format for stream
    log_format stream_main '$remote_addr [$time_local] '
                          '$protocol $status $bytes_sent $bytes_received '
                          '$session_time "$upstream_addr" '
                          '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    
    access_log /var/log/nginx/stream_access.log stream_main;
    error_log /var/log/nginx/stream_error.log;
    
    # TimescaleDB load balancing (if multiple instances)
    upstream timescaledb {
        server timescaledb:5432 max_fails=3 fail_timeout=30s;
        # Add more TimescaleDB instances for HA
        # server timescaledb2:5432 max_fails=3 fail_timeout=30s backup;
    }
    
    # Redis load balancing (if multiple instances)
    upstream redis {
        server redis:6379 max_fails=3 fail_timeout=30s;
        # Add more Redis instances for HA
        # server redis2:6379 max_fails=3 fail_timeout=30s backup;
    }
    
    # PostgreSQL proxy (optional)
    server {
        listen 5432;
        proxy_pass timescaledb;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
    
    # Redis proxy (optional)
    server {
        listen 6379;
        proxy_pass redis;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
}